import datetime

class Task:
    def __init__(self, title, description="", due_date=None, status="Pending"):
        self.title = title
        self.description = description
        self.due_date = due_date
        self.status = status

    def __str__(self):
        return f"{self.title} ({self.status})"

class ToDoList:
    def __init__(self):
        self.tasks = []

    def add_task(self, title, description="", due_date=None):
        if due_date:
            try:
                due_date = datetime.datetime.strptime(due_date, "%Y-%m-%d")
            except ValueError:
                print("Invalid date format. Please use YYYY-MM-DD.")
                return
        task = Task(title, description, due_date)
        self.tasks.append(task)
        print("Task added successfully.")

    def delete_task(self, task_index):
        if 0 <= task_index < len(self.tasks):
            deleted_task = self.tasks.pop(task_index)
            print(f"Task deleted: {deleted_task}")
        else:
            print("Invalid task index.")

    def view_tasks(self):
        if not self.tasks:
            print("No tasks in the list.")
        else:
            print("Your To-Do List:")
            for i, task in enumerate(self.tasks):
                print(f"{i + 1}. {task}")

    def update_task(self, task_index, new_title=None, new_description=None, new_due_date=None):
        if 0 <= task_index < len(self.tasks):
            task = self.tasks[task_index]
            if new_title:
                task.title = new_title
            if new_description:
                task.description = new_description
            if new_due_date:
                try:
                    task.due_date = datetime.datetime.strptime(new_due_date, "%Y-%m-%d")
                except ValueError:
                    print("Invalid date format. Please use YYYY-MM-DD.")
                    return
            print("Task updated successfully.")
        else:
            print("Invalid task index.")

    def mark_task_completed(self, task_index):
        if 0 <= task_index < len(self.tasks):
            task = self.tasks[task_index]
            task.status = "Completed"
            print(f"Task marked as completed: {task}")
        else:
            print("Invalid task index.")

def main():
    todo_list = ToDoList()

    while True:
        print("\nTo-Do List App")
        print("1. Add Task")
        print("2. Delete Task")
        print("3. View Tasks")
        print("4. Update Task")
        print("5. Mark Task as Completed")
        print("6. Exit")

        try:
            choice = int(input("Enter your choice: "))
        except ValueError:
            print("Please enter a valid number.")
            continue

        if choice == 1:
            title = input("Enter task title: ")
            description = input("Enter task description (optional): ")
            due_date = input("Enter due date (YYYY-MM-DD, optional): ")
            todo_list.add_task(title, description, due_date)
        elif choice == 2:
            try:
                task_index = int(input("Enter task index to delete: ")) - 1
                todo_list.delete_task(task_index)
            except ValueError:
                print("Please enter a valid number.")
        elif choice == 3:
            todo_list.view_tasks()
        elif choice == 4:
            try:
                task_index = int(input("Enter task index to update: ")) - 1
                new_title = input("Enter new title (optional): ")
                new_description = input("Enter new description (optional): ")
                new_due_date = input("Enter new due date (YYYY-MM-DD, optional): ")
                todo_list.update_task(task_index, new_title, new_description, new_due_date)
            except ValueError:
                print("Please enter a valid number.")
        elif choice == 5:
            try:
                task_index = int(input("Enter task index to mark as completed: ")) - 1
                todo_list.mark_task_completed(task_index)
            except ValueError:
                print("Please enter a valid number.")
        elif choice == 6:
            print("Exiting...")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
